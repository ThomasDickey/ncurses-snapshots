.\"***************************************************************************
.\" Copyright 2019-2024,2025 Thomas E. Dickey                                *
.\" Copyright 2002-2012,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_add_wchstr.3x,v 1.57 2025/03/15 20:41:04 tom Exp $
.TH curs_add_wchstr 3X 2025-03-15 "ncurses @NCURSES_MAJOR@.@NCURSES_MINOR@" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH NAME
\fB\%add_wchstr\fP,
\fB\%wadd_wchstr\fP,
\fB\%mvadd_wchstr\fP,
\fB\%mvwadd_wchstr\fP,
\fB\%add_wchnstr\fP,
\fB\%wadd_wchnstr\fP,
\fB\%mvadd_wchnstr\fP,
\fB\%mvwadd_wchnstr\fP \-
add a \fIcurses\fR complex character string to a window
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBint add_wchstr(const cchar_t * \fIwchstr\fP);
\fBint wadd_wchstr(WINDOW *  \fIwin\fP, const cchar_t * \fIwchstr\fP);
\fBint mvadd_wchstr(int \fIy\fP, int \fIx\fP, const cchar_t * \fIwchstr\fP);
\fBint mvwadd_wchstr(WINDOW * \fIwin\fP, int \fIy\fP, int \fIx\fP,
      const cchar_t * \fIwchstr\fP);
.PP
\fBint add_wchnstr(const cchar_t * \fIwchstr\fP, int \fIn\fP);
\fBint wadd_wchnstr(WINDOW *  \fIwin\fP, const cchar_t * \fIwchstr\fP,
      int \fIn\fP);
\fBint mvadd_wchnstr(int \fIy\fP, int \fIx\fP, const cchar_t * \fIwchstr\fP,
      int \fIn\fP);
\fBint mvwadd_wchnstr(WINDOW * \fIwin\fP, int \fIy\fP, int \fIx\fP,
      const cchar_t * \fIwchstr\fP, int \fIn\fP);
.fi
.SH DESCRIPTION
.B \%wadd_wchstr
copies the string of complex characters
.I \%wchstr
to the window
.IR win "."
A null complex character terminates the string.
If a complex character does not completely fit at the end of the line,
.I curses
fills its remaining cells with the window's background character;
see \fB\%bkgrnd\fP(3X).
.B \%wadd_wchnstr
does the same,
but copies at most
.I n
characters,
or as many as possible if
.I n
is
.BR \-1 "."
\fB\%ncurses\fP(3X) describes the variants of these functions.
.PP
Because these functions do not call \fB\%wadd_wch\fP(3X) internally,
they are faster than \fB\%waddwstr\fP(3X) and \fB\%waddnwstr\fP(3X).
On the other hand,
they
.bP
do not treat the backspace,
carriage return,
or line feed characters specially;
.bP
do not represent unprintable characters with \fB\%wunctrl\fP(3X);
.bP
do not update the cursor position to follow the last character written;
.bP
truncate the string at the window's right margin,
rather than wrapping it to the next line and potentially scrolling.
.SH RETURN VALUE
These functions return
.B OK
on success and
.B ERR
on failure.
.PP
In
.IR \%ncurses ","
these functions fail if
.bP
the
.I curses
screen has not been initialized,
.bP
.I wchstr
is a null pointer,
or
.bP
(for functions taking a
.I \%WINDOW
pointer argument)
.I win
is a null pointer.
.PP
Functions prefixed with \*(``mv\*('' first perform cursor movement and
fail if the position
.RI ( y ,
.IR x )
is outside the window boundaries.
.SH NOTES
All of these functions except
.B \%wadd_wchnstr
may be implemented as macros.
.SH PORTABILITY
X/Open Curses Issue\ 4 describes these functions.
It specifies no error conditions for them.
.SH HISTORY
X/Open Curses Issue\ 4 (1995) initially specified these functions.
The System\ V Interface Definition Version\ 4
of the same year
specified functions named
.I \%waddwchstr
and
.I \%waddwchnstr
(and the usual variants).
.\" SVID 4, vol 3., p. 477
These were later additions to
.RI SVr4. x ,
not appearing in the first SVr4 (1989).
They differed from X/Open's later
.I \%wadd_wchstr
and
.I \%wadd_wchnstr
in that they each took an argument of type
.I \%wchar_t
instead of
.IR \%cchar_t "."
.SH SEE ALSO
\fB\%curs_addchstr\fP(3X) describes comparable functions of the
.I \%ncurses
library in its non-wide-character configuration.
.PP
\fB\%curses\fP(3X),
\fB\%curs_addwstr\fP(3X),
\fB\%curs_add_wch\fP(3X)
