.\"***************************************************************************
.\" Copyright 2018-2020,2021 Thomas E. Dickey                                *
.\" Copyright 2002-2012,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_get_wstr.3x,v 1.25 2021/12/25 21:49:32 tom Exp $
.TH curs_get_wstr 3X ""
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.na
.hy 0
.SH NAME
\fBget_wstr\fP,
\fBgetn_wstr\fP,
\fBwget_wstr\fP,
\fBwgetn_wstr\fP,
\fBmvget_wstr\fP,
\fBmvgetn_wstr\fP,
\fBmvwget_wstr\fP,
\fBmvwgetn_wstr\fP \- get an array of wide characters from a curses terminal keyboard
.ad
.hy
.SH SYNOPSIS
.nf
\fB#include <curses.h>\fP
.sp
\fBint get_wstr(wint_t *\fP\fIwstr\fP\fB);\fP
.br
\fBint getn_wstr(wint_t *\fP\fIwstr\fP\fB, int \fP\fIn\fP\fB);\fP
.br
\fBint wget_wstr(WINDOW *\fP\fIwin\fP\fB, wint_t *\fP\fIwstr\fP\fB);\fP
.br
\fBint wgetn_wstr(WINDOW *\fP\fIwin\fP\fB, wint_t *\fP\fIwstr\fP\fB, int \fP\fIn\fP\fB);\fP
.sp
\fBint mvget_wstr(int \fP\fIy\fP\fB, int \fP\fIx\fP\fB, wint_t *\fP\fIwstr\fP\fB);\fP
.br
\fBint mvgetn_wstr(int \fP\fIy\fP\fB, int \fP\fIx\fP\fB, wint_t *\fP\fIwstr\fP\fB, int \fP\fIn\fP\fB);\fP
.br
\fBint mvwget_wstr(WINDOW *\fP\fIwin\fP\fB, int \fP\fIy\fP\fB, int \fP\fIx\fP\fB, wint_t *\fP\fIwstr\fP\fB);\fP
.br
\fBint mvwgetn_wstr(WINDOW *\fP\fIwin\fP\fB, int \fP\fIy\fP\fB, int \fP\fIx\fP\fB, wint_t *\fP\fIwstr\fP\fB, int \fP\fIn\fP\fB);\fP
.fi
.SH DESCRIPTION
The effect of
\fBget_wstr\fP
is as though a series of calls
to
\fBget_wch\fP(3X)
were made, until a newline, other end-of-line,
or end-of-file condition is processed.
An end-of-file condition is represented by \fBWEOF\fP,
as defined in \fB<wchar.h>\fP.
The newline and end-of-line conditions are represented
by the \fB\\n\fP \fBwchar_t\fP value.
In all instances, the end of the string is terminated by a null \fBwchar_t\fP.
The routine places resulting values in the area pointed to by \fIwstr\fP.
.PP
The user's erase and kill characters are interpreted.
If keypad
mode is on for the window, \fBKEY_LEFT\fP and \fBKEY_BACKSPACE\fP
are both considered equivalent to the user's kill character.
.PP
Characters input are echoed only if \fBecho\fP is currently on.
In that case,
backspace is echoed as deletion of the previous character (typically a left
motion).
.PP
The effect of
\fBwget_wstr\fP
is as though a series of
calls to
\fBwget_wch\fP
were made.
.PP
The effect of
\fBmvget_wstr\fP
is as though a call to
\fBmove\fP
and then a series of calls to
\fBget_wch\fP
were
made.
.PP
The effect of
\fBmvwget_wstr\fP
is as though a call to
\fBwmove\fP
and then a series of calls to
\fBwget_wch\fP
were made.
.PP
The
\fBgetn_wstr\fP,
\fBmvgetn_wstr\fP,
\fBmvwgetn_wstr\fP, and
\fBwgetn_wstr\fP
functions are identical
to the
\fBget_wstr\fP,
\fBmvget_wstr\fP,
\fBmvwget_wstr\fP, and
\fBwget_wstr\fP
functions, respectively,
except that the
\fB*n_*\fP
versions read at most
\fIn\fP
characters, letting the application prevent overflow of the
input buffer.
.SH NOTES
Using
\fBget_wstr\fP,
\fBmvget_wstr\fP,
\fBmvwget_wstr\fP, or
\fBwget_wstr\fP
to read a line that
overflows the array pointed to by
\fBwstr\fP
causes undefined
results.
The use of
\fBgetn_wstr\fP,
\fBmvgetn_wstr\fP,
\fBmvwgetn_wstr\fP, or
\fBwgetn_wstr\fP, respectively, is recommended.
.PP
These functions cannot return \fBKEY_\fP values because there
is no way to distinguish a \fBKEY_\fP value from a valid \fBwchar_t\fP value.
.PP
All of these routines except \fBwgetn_wstr\fP may be macros.
.SH RETURN VALUE
All of these functions return \fBOK\fP upon successful completion.
Otherwise, they return \fBERR\fP.
.PP
Functions using a window parameter return an error if it is null.
.RS
.TP 5
\fBwgetn_wstr\fP
returns an error if the associated call to \fBwget_wch\fP failed.
.RE
.PP
Functions with a \*(``mv\*('' prefix first perform a cursor movement using
\fBwmove\fP, and return an error if the position is outside the window,
or if the window pointer is null.
.SH PORTABILITY
These functions are described in The Single Unix Specification, Version 2.
No error conditions are defined.
This implementation returns \fBERR\fP if the window pointer is null,
or if the lower-level \fBwget_wch\fP call returns an \fBERR\fP.
In the latter case,
an \fBERR\fP return without other data is treated as an end-of-file condition,
and the returned array contains a \fBWEOF\fP followed by a null \fBwchar_t\fP.
.PP
X/Open curses documented these functions to pass an array of \fBwchar_t\fP
in 1997, but that was an error because of this part of the description:
.RS
.PP
The effect of \fBget_wstr\fP is as though a series of calls to
\fBget_wch\fP were made, until a newline character, end-of-line character, or
end-of-file character is processed.
.RE
.PP
The latter function \fIget_wch\fP can return a negative value,
while \fBwchar_t\fP is a unsigned type.
All of the vendors implement this using \fBwint_t\fP, following the standard.
.PP
X/Open Curses, Issue 7 (2009) is unclear regarding whether
the terminating \fInull \fP\fBwchar_t\fP
value is counted in the length parameter \fIn\fP.
X/Open Curses, Issue 7 revised the corresponding description
of \fBwgetnstr\fP to address this issue.
The unrevised description of \fBwget_nwstr\fP can be interpreted either way.
This implementation counts the terminator in the length.
.PP
X/Open Curses does not specify what happens if the length \fIn\fP is negative.
.bP
For analogy with \fBwgetnstr\fP,
ncurses 6.2 uses a limit (based on \fBLINE_MAX\fP).
.bP
Some other implementations (such as Solaris xcurses) do the same,
while others (PDCurses) do not allow this.
.bP
NetBSD 7 curses imitates ncurses 6.1 in this regard,
treating a \fB\-1\fP as an indefinite number of characters.
.SH SEE ALSO
Functions:
\fBcurses\fP(3X),
\fBcurs_get_wch\fP(3X),
\fBcurs_getstr\fP(3X).
