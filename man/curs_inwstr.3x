.\"***************************************************************************
.\" Copyright 2018-2024,2025 Thomas E. Dickey                                *
.\" Copyright 2002-2012,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_inwstr.3x,v 1.60 2025/03/01 21:29:42 tom Exp $
.TH curs_inwstr 3X 2025-03-01 "ncurses @NCURSES_MAJOR@.@NCURSES_MINOR@" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH NAME
\fB\%inwstr\fP,
\fB\%winwstr\fP,
\fB\%mvinwstr\fP,
\fB\%mvwinwstr\fP,
\fB\%innwstr\fP,
\fB\%winnwstr\fP,
\fB\%mvinnwstr\fP,
\fB\%mvwinnwstr\fP \-
get a wide-character string from a \fIcurses\fR window
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBint inwstr(wchar_t * \fIwstr\fP);
\fBint winwstr(WINDOW * \fIwin\fP, wchar_t * \fIwstr\fP);
\fBint mvinwstr(int \fIy\fP, int \fIx\fP, wchar_t * \fIwstr\fP);
\fBint mvwinwstr(WINDOW * \fIwin\fP, int \fIy\fP, int \fIx\fP, wchar_t * \fIwstr\fP);
.PP
\fBint innwstr(wchar_t * \fIwstr\fP, int \fIn\fP);
\fBint winnwstr(WINDOW * \fIwin\fP, wchar_t * \fIwstr\fP, int \fIn\fP);
\fBint mvinnwstr(int \fIy\fP, int \fIx\fP, wchar_t * \fIwstr\fP, int \fIn\fP);
\fBint mvwinnwstr(WINDOW * \fIwin\fP, int \fIy\fP, int \fIx\fP, wchar_t * \fIwstr\fP,
      int \fIn\fP);
.fi
.SH DESCRIPTION
.B \%winwstr
extracts a wide-character string from a
.I curses
window
.IR win ","
starting at the cursor and stopping at the end of the line,
and stores it in
.IR wstr ","
terminating it with a wide null character
and
omitting any attributes and color pair identifier
that
.I curses
associates with each character.
.B \%winnwstr
does the same,
but copies at most
.I n
wide characters from
.IR win "."
A negative
.I n
implies no limit;
.B \%winnwstr
then works like
.BR \%winwstr "."
\fB\%ncurses\fP(3X) describes the variants of these functions.
.SH RETURN VALUE
On successful operation,
these functions return the count of wide characters copied from
.I win
to
.IR wstr ","
or
.B ERR
upon failure.
.BR \%innwstr ","
.BR \%winnwstr ","
.BR \%mvinnwstr ","
and
.B \%mvwinnwstr
return
.B ERR
if
.I n
is insufficiently large to store a complete wide character string.
(Recall that a
.I curses
complex character can contain multiple wide characters,
some of which may be non-spacing.)
.PP
In
.IR \%ncurses ","
these functions return
.B ERR
if
.bP
the
.I curses
screen has not been initialized,
.bP
(for functions taking a
.I \%WINDOW
pointer argument)
.I win
is a null pointer,
or
.bP
.I wstr
is a null pointer.
.PP
Functions prefixed with \*(``mv\*('' first perform cursor movement and
fail if the position
.RI ( y ,
.IR x )
is outside the window boundaries.
.SH NOTES
All of these functions except
.B \%winnwstr
may be implemented as macros.
.PP
Reading a line that overflows the array pointed to by
.I wstr
with
.BR \%inwstr ","
.BR \%winwstr ","
.BR \%mvinwstr ","
or
.B \%mvwinwstr
causes undefined results.
Use of
.BR \%innwstr ","
.BR \%winnwstr ","
.BR \%mvinnwstr ","
and
.B \%mvwinnwstr
is recommended instead.
.SH EXTENSIONS
.BR \%innwstr ","
.BR \%winnwstr ","
.BR \%mvinnwstr ","
and
.BR \%mvwinnwstr "'s"
acceptance of negative
.I n
values is an
.I \%ncurses
extension.
.SH PORTABILITY
Applications employing
.I \%ncurses
extensions should condition their use on the visibility of the
.B \%NCURSES_VERSION
preprocessor macro.
.PP
X/Open Curses Issue\ 4 describes these functions.
It specifies no error conditions for them.
.PP
Notwithstanding the foregoing,
X/Open Curses Issues 4 and 7 both state that
.IR \%innwstr ","
.IR \%winnwstr ","
.IR \%mvinnwstr ","
and
.I \%mvwinnwstr
\*(``fail .\|.\|. [i]f the array is not large enough to contain any
complete characters\*(''.
Strictly interpreted,
this means that a caller of these functions cannot use their return
values to detect truncation of a wide-character string copied from more
than one character cell in
.IR win "."
.I \%ncurses
reports any truncation with
.IR ERR "."
.PP
X/Open Curses specifies
.IR \%inwstr ","
.IR \%winwstr ","
.IR \%mvinwstr ","
and
.I \%mvwinwstr
as returning
.I OK
rather than a (wide) character count,
unlike their non-wide counterparts
.IR \%instr ","
.IR \%winstr ","
.IR \%mvinstr ","
and
.IR \%mvwinstr "."
.I \%ncurses
regards this inconsistency as an error in the standard.
.SH HISTORY
The System\ V Interface Definition,
Version 4 (1995),
specified
.I \%winwstr
and
.I \%winnwstr
(and the usual variants).
.\" SVID 4, vol 3., p. 516
These were later additions to
.RI SVr4. x ,
not appearing in the first SVr4 (1989).
Their synopses described each function as taking
an argument of type
.RI pointer-to- char
instead of
.RI pointer-to- wchar_t ,
despite describing them as \*(``returning the string of
.I \%wchar_t
in
.IR str "\*(''."
Presumably this was an error in the System\ V Interface Definition.
.SH SEE ALSO
\fB\%curs_instr\fP(3X) describes comparable functions of the
.I \%ncurses
library in its non-wide-character configuration.
.PP
\fB\%curses\fP(3X),
\fB\%curs_in_wch\fP(3X),
\fB\%curs_in_wchstr\fP(3X)
