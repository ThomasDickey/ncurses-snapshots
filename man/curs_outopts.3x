.\"***************************************************************************
.\" Copyright 2018-2024,2025 Thomas E. Dickey                                *
.\" Copyright 1998-2016,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_outopts.3x,v 1.89 2025/03/01 21:42:22 tom Exp $
.TH curs_outopts 3X 2025-03-01 "ncurses @NCURSES_MAJOR@.@NCURSES_MINOR@" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH NAME
\fB\%clearok\fP,
\fB\%idcok\fP,
\fB\%idlok\fP,
\fB\%immedok\fP,
\fB\%leaveok\fP,
\fB\%scrollok\fP,
\fB\%setscrreg\fP,
\fB\%wsetscrreg\fP \-
set \fIcurses\fR output options
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBint clearok(WINDOW * \fIwin\fP, bool \fIbf\fP);
\fBvoid idcok(WINDOW * \fIwin\fP, bool \fIbf\fP);
\fBint idlok(WINDOW * \fIwin\fP, bool \fIbf\fP);
\fBvoid immedok(WINDOW * \fIwin\fP, bool \fIbf\fP);
\fBint leaveok(WINDOW * \fIwin\fP, bool \fIbf\fP);
\fBint scrollok(WINDOW * \fIwin\fP, bool \fIbf\fP);
.PP
\fBint setscrreg(int \fItop\fP, int \fIbot\fP);
\fBint wsetscrreg(WINDOW * \fIwin\fP, int \fItop\fP, int \fIbot\fP);
.fi
.SH DESCRIPTION
These functions configure properties of
.I curses
windows that affect their manner of output.
Boolean-valued properties are initially
.B FALSE
except where noted.
\fBendwin\fP(3X) resets any terminal modes corresponding to these
properties;
an application need not restore their initial values.
.SS clearok
Setting
.IR win 's
.B \%clearok
property to
.B TRUE
causes the next
.B \%wrefresh
call on it to clear the terminal screen and redraw it entirely.
This property is useful to restore the contents of the screen
(perhaps because another process has written to the terminal),
or in some cases to achieve a more pleasing visual effect.
If
.I \%win
is
.B \%curscr
(see \fBcurs_variables\fP(3X)),
the next
.B \%wrefresh
call on
.I any
window causes the terminal screen to clear and redraw as above.
.B \%wrefresh
resets this property to
.BR FALSE "."
.SS idcok
(This property defaults
.BR TRUE ".)"
Setting
.IR win 's
.B \%idcok
property to
.B FALSE
prevents
.I curses
from using the insert/delete character capabilities of terminal types
possessing them according to the
.I \%term\%info
database.
.\" TODO: What's the historical rationale for the `idcok()` feature?
.SS idlok
Setting
.IR win 's
.B \%idlok
property to
.B TRUE
causes
.I curses
to consider
using the insert/delete line capabilities of terminal types
possessing them according to the
.I \%term\%info
database.
Enable this option
if the application explicitly requires these operations,
as a full-screen text editor might;
otherwise the results may be visually annoying to the user.
.\" TODO: Substantiate that claim.
.SS immedok
If
.B \%immedok
is called with
.B TRUE
as second argument,
any change in the window image,
such as the ones caused by
.BR \%waddch ","
.BR \%wclrtobot ","
.BR \%wscrl ","
etc., automatically causes a call to
.BR wrefresh "."
However, it may degrade performance considerably,
due to repeated calls to
.BR wrefresh "."
Calling
.B \%immedok
with
.B FALSE
as second argument
restores the default behavior,
i.e., deferring screen updates until a refresh is needed.
.SS leaveok
Normally, the hardware cursor is left at the location of the window cursor
being refreshed.
The
.B \%leaveok
option allows the cursor to be left
wherever the update happens to leave it.
It is useful for applications where
the cursor is not used, since it reduces the need for cursor motions.
.SS scrollok
The
.B \%scrollok
option controls what happens when the cursor of a window is
moved off the edge of the window or scrolling region, either as a result of a
newline action on the bottom line, or typing the last character of the last
line.
If disabled,
.RI ( bf
is
.BR FALSE "),"
the cursor is left on the bottom
line.
If enabled,
.RI ( bf
is
.BR TRUE "),"
the window is scrolled up one line
(Note that to get the physical scrolling effect on the terminal, it is
also necessary to call
.BR idlok ")."
.SS "setscrreg, wsetscrreg"
The
.B \%setscrreg
and
.B \%wsetscrreg
routines allow the application
programmer to set a software scrolling region in a window.
The
.I top
and
.I bot
parameters
are the line numbers of the top and bottom margin of the scrolling
region.
(Line 0 is the top line of the window.)  If this option and
.B scrollok
are enabled, an attempt to move off the bottom margin line
causes all lines in the scrolling region to scroll one line in the direction
of the first line.
Only the text of the window is scrolled.
(Note that this
has nothing to do with the use of a physical scrolling region capability in the
terminal, like that in the VT100.
If
.B \%idlok
is enabled and the terminal
has either a scrolling region or insert/delete line capability, they will
probably be used by the output routines.)
.SH RETURN VALUE
The functions
.B \%setscrreg
and
.B \%wsetscrreg
return
.B OK
upon success
and
.B ERR
upon failure.
All other routines that return an integer always
return
.BR OK "."
.PP
In this implementation,
.bP
those functions that have a window pointer
will return
.B ERR
if the window pointer is null
.bP
.B \%wsetscrreg
returns
.B ERR
if the scrolling region limits extend outside the
window boundaries.
.SH NOTES
.BR \%clearok ","
.BR \%leaveok ","
.BR \%scrollok ","
.BR \%idcok ","
and
.B \%setscrreg
may be implemented as macros.
.PP
The
.B \%immedok
routine is useful for windows that are used as terminal
emulators.
.SH PORTABILITY
X/Open Curses Issue\ 4 describes these functions.
It specifies no error conditions for them.
.PP
Some historic
.I curses
implementations,
as an undocumented feature,
did the equivalent of
.RB \*(`` \%clearok( .\|.\|. ", 1)" \*(''
when
.B \%touchwin(stdstr)
or
.B \%clear(stdstr)
were used.
This trick does not work with
.IR \%ncurses .
.PP
Early System\ V
.I curses
implementations specified that with
.I \%scrollok
enabled,
any window modification triggering a scroll
also forced a physical refresh.
X/Open Curses does not require this,
and
.I \%ncurses
avoids doing so to better optimize vertical motions upon a
.IR \%wrefresh "."
.PP
X/Open Curses does not mention that the cursor should be
made invisible as a side-effect of
.IR \%leaveok "."
SVr4
.I curses
documentation notes this,
but the code neglects it.
Use \fB\%curs_set\fP(3X) to make the cursor invisible.
.SH HISTORY
4BSD (1980)
introduced
.IR \%clearok ","
.IR \%leaveok ","
and
.IR \%scrollok "."
.PP
SVr2 (1984)
supplied
.IR \%idlok ","
.IR \%setscrreg ","
and
.IR \%wsetscrreg "."
.PP
SVr3.1 (1987)
implemented
.I \%idcok
and
.IR \%immedok "."
.PP
.I \%ncurses
formerly treated
.I nl
and
.I nonl
as both input
.I and
output options,
but no longer;
see \fB\%curs_inopts\fP(3X).
.SH SEE ALSO
\fB\%curses\fP(3X),
\fB\%curs_addch\fP(3X),
\fB\%curs_clear\fP(3X),
\fB\%curs_initscr\fP(3X),
\fB\%curs_refresh\fP(3X),
\fB\%curs_scroll\fP(3X),
\fB\%curs_variables\fP(3X)
