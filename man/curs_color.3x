.\"***************************************************************************
.\" Copyright 2018-2024,2025 Thomas E. Dickey                                *
.\" Copyright 1998-2016,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_color.3x,v 1.126 2025/08/23 22:39:20 tom Exp $
.TH curs_color 3X 2025-08-23 "ncurses @NCURSES_MAJOR@.@NCURSES_MINOR@" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.
.SH NAME
\fB\%start_color\fP,
\fB\%has_colors\fP,
\fB\%can_change_color\fP,
\fB\%init_pair\fP,
\fB\%init_color\fP,
\fB\%init_extended_pair\fP,
\fB\%init_extended_color\fP,
\fB\%color_content\fP,
\fB\%pair_content\fP,
\fB\%extended_color_content\fP,
\fB\%extended_pair_content\fP,
\fB\%reset_color_pairs\fP,
\fB\%COLOR_PAIR\fP,
\fB\%PAIR_NUMBER\fP,
\fB\%COLORS\fP,
\fB\%COLOR_PAIRS\fP,
\fB\%COLOR_BLACK\fP,
\fB\%COLOR_RED\fP,
\fB\%COLOR_GREEN\fP,
\fB\%COLOR_YELLOW\fP,
\fB\%COLOR_BLUE\fP,
\fB\%COLOR_MAGENTA\fP,
\fB\%COLOR_CYAN\fP,
\fB\%COLOR_WHITE\fP,
\fB\%A_COLOR\fP \-
manipulate terminal colors with \fIcurses\fR
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fI/* variables */
\fBint COLOR_PAIRS;
\fBint COLORS;
.PP
\fBint start_color(void);
.PP
\fBbool has_colors(void);
\fBbool can_change_color(void);
.PP
\fBint init_pair(short \fIpair\fP, short \fIf\fP, short \fIb\fP);
\fBint init_color(short \fIcolor\fP, short \fIr\fP, short \fIg\fP, short \fIb\fP);
\fI/* extensions */
\fBint init_extended_pair(int \fIpair\fP, int \fIf\fP, int \fIb\fP);
\fBint init_extended_color(int \fIcolor\fP, int \fIr\fP, int \fIg\fP, int \fIb\fP);
.PP
\fBint color_content(short \fIcolor\fP, short *\fIr\fP, short *\fIg\fP, short *\fIb\fP);
\fBint pair_content(short \fIpair\fP, short *\fIf\fP, short *\fIb\fP);
\fI/* extensions */
\fBint extended_color_content(int \fIcolor\fP, int *\fIr\fP, int *\fIg\fP, int *\fIb\fP);
\fBint extended_pair_content(int \fIpair\fP, int *\fIf\fP, int *\fIb\fP);
.PP
\fI/* extension */
\fBvoid reset_color_pairs(void);
.PP
\fI/* macros */
\fBint COLOR_PAIR(int \fIn\fP);
\fBPAIR_NUMBER(int \fIattr\fP);
\fBCOLOR_BLACK
\fBCOLOR_RED
\fBCOLOR_GREEN
\fBCOLOR_YELLOW
\fBCOLOR_BLUE
\fBCOLOR_MAGENTA
\fBCOLOR_CYAN
\fBCOLOR_WHITE
\fBA_COLOR
.fi
.SH DESCRIPTION
.SS Overview
\fIcurses\fP supports color attributes on terminals with that
capability.
Call \fB\%start_color\fP
(typically right after \fB\%initscr\fP(3X))
to enable this feature.
Colors are always used in pairs.
A
.I "color pair"
couples a foreground color for characters with a background color for
the blank field on which characters are rendered.
\fB\%init_pair\fP initializes a color pair.
The macro \fB\%COLOR_PAIR\fP(\fIn\fP) can then convert the pair to a
video attribute.
.PP
If a terminal has the relevant capability,
\fB\%init_color\fP permits (re)definition of a color.
\fB\%has_colors\fP and \fB\%can_change_color\fP
return \fBTRUE\fP or \fBFALSE\fP,
depending on whether the terminal has color capability and whether the
programmer can change the colors.
\fB\%color_content\fP permits extraction of the
red,
green,
and blue components of an initialized color.
\fB\%pair_content\fP permits discovery of a color pair's current
definition.
.SS Rendering
.I curses
combines the following data to render a character cell.
Any of them can include color information.
.bP
.I curses
character attributes,
as from \fB\%waddch\fP(3X) or \fB\%wadd_wch\fP(3X)
.bP
window attributes,
as from \fB\%wattrset\fP(3X) or \fB\%wattr_set\fP(3X)
.bP
window background character attributes,
as from \fB\%wbkgdset\fP(3X) or \fB\%wbkgrndset\fP(3X)
.PP
Per-character and window attributes are usually set through a function
parameter containing attributes including a color pair value.
Some functions,
such as \fB\%wattr_set\fP,
use a separate color pair number parameter.
.PP
The background character is a special case:
it includes a character code,
just as if it were passed to \fB\%waddch\fP.
.PP
The \fIcurses\fP library does the actual work of combining these color
pairs in an internal function called from \fB\%waddch\fP:
.bP
If the parameter passed to \fB\%waddch\fP is \fIblank\fP,
and it uses the special color pair 0,
\fIcurses\fP next checks the window attribute.
.RS
.bP
If the window attribute does not use color pair 0,
\fIcurses\fP uses the color pair from the window attribute.
.bP
Otherwise, \fIcurses\fP uses the background character.
.RE
.bP
If the parameter passed to \fB\%waddch\fP is \fInot blank\fP,
or it does not use the special color pair 0,
\fIcurses\fP prefers the color pair from the parameter,
if it is nonzero.
Otherwise, it tries the window attribute next, and finally the
background character.
.PP
Some \fIcurses\fP functions such as \fB\%wprintw\fP call \fB\%waddch\fP.
Those do not combine its parameter with a color pair.
Consequently those calls use only the window attribute or
the background character.
.SH CONSTANTS
ISO\ 6429 and ECMA-48
define eight standard colors
(also known as \*(``ANSI\*('' colors).
.I curses\.h
defines object-like macros
.BR \%COLOR_BLACK ","
.BR \%COLOR_RED ","
.BR \%COLOR_GREEN ","
.BR \%COLOR_YELLOW ","
.BR \%COLOR_BLUE ","
.BR \%COLOR_MAGENTA ","
.BR \%COLOR_CYAN ","
and
.B \%COLOR_WHITE
accordingly.
.I curses
assumes that
.B \%COLOR_BLACK
is the default background color for all terminals.
.I \%ncurses
offers an extension to override that assumption;
see \fB\%assume_default_colors\fP(3X).
Some terminals support additional colors that lack standard names.
.PP
.B \%A_COLOR
is a bit mask that,
when bitwise \*(``and\*(''-ed with a
.IR \%chtype ","
.\" XXX: and right-shifted by...?
extracts its color pair identifier.
.SH VARIABLES
.SS COLORS
is initialized by \fB\%start_color\fP to the maximum number of colors
the terminal can support.
.SS COLOR_PAIRS
is initialized by \fB\%start_color\fP to the maximum number of color
pairs the terminal can support.
Often,
its value is the product \fB\%COLORS\fP \(mu \fB\%COLORS\fP,
but this is not always true.
.bP
A few terminals use the HLS color space
(see \fB\%start_color\fP below),
ignoring this rule;
and
.bP
terminals supporting a large number of colors are limited to the number
of color pairs that a
.I "signed short"
value can represent.
.SH FUNCTIONS
.SS start_color
The \fB\%start_color\fP routine requires no arguments.
It must be called if the programmer wants to use colors, and before any other
color manipulation routine is called.
It is good practice to call this routine right after \fB\%initscr\fP.
\fB\%start_color\fP does this:
.bP
It initializes two global variables, \fB\%COLORS\fP and
\fB\%COLOR_PAIRS\fP (respectively defining the maximum number of colors
and color pairs the terminal can support).
.bP
It initializes the special color pair \fB\%0\fP to the default foreground
and background colors.
No other color pairs are initialized.
.bP
It restores the colors on the terminal to the values
they had when the terminal was just turned on.
.bP
If the terminal supports the \fBinitc\fP \%(\fBinitialize_color\fP) capability,
\fB\%start_color\fP
initializes its internal table representing the
red, green, and blue components of the color palette.
.IP
The components depend on whether the terminal uses
CGA (aka \*(``ANSI\*('') or
HLS (i.e., the \fBhls\fP \%(\fBhue_lightness_saturation\fP) capability is set).
The table is initialized first for eight basic colors
(black, red, green, yellow, blue, magenta, cyan, and white),
using weights that depend upon the CGA/HLS choice.
For \*(``ANSI\*('' colors the weights are \fB680\fP or \fB0\fP
depending on whether the corresponding
red, green, or blue component is used or not.
That permits using \fB1000\fP to represent bold/bright colors.
After the initial eight colors
(if the terminal supports more than eight colors)
the components are initialized using the same pattern,
but with weights of \fB1000\fP.
SVr4 uses a similar scheme, but uses \fB1000\fP
for the components of the initial eight colors.
.IP
\fB\%start_color\fP does not attempt to set the terminal's color palette
to match its built-in table.
An application may use \fB\%init_color\fP to alter the internal table
along with the terminal's color.
.PP
These limits apply to color values and color pairs.
Values outside these limits are not valid, and may result in a runtime error:
.bP
\fBCOLORS\fP corresponds to the terminal database's \fB\%max_colors\fP capability,
(see \fB\%terminfo\fP(5)).
.bP
color values are expected to be in the range \fB0\fP to \fB\%COLORS\-1\fP,
inclusive (including \fB0\fP and \fB\%COLORS\-1\fP).
.bP
a special color value \fB\-1\fP is used in certain extended functions
to denote the \fIdefault color\fP (see \fB\%use_default_colors\fP(3X)).
.bP
\fB\%COLOR_PAIRS\fP corresponds to
the terminal database's \fB\%max_pairs\fP capability,
(see \fB\%terminfo\fP(5)).
.bP
valid color pair values are in the range \fB1\fP to \fB\%COLOR_PAIRS\-1\fP,
inclusive.
.bP
color pair \fB0\fP is special; it denotes \*(``no color\*(''.
.IP
Color pair \fB0\fP is assumed to be white on black,
but is actually whatever the terminal implements before color is initialized.
It cannot be modified by the application.
.SS has_colors
.B \%has_colors
returns
.B TRUE
if the terminal supports colors and
.B FALSE
if it does not.
\fB\%initscr\fP(3X) or \fB\%newterm\fP(3X) must be called first,
but
.B \%start_color
need not be.
An application might call
.B \%has_colors
to decide whether to use color
or a video attribute like
.B \%A_BOLD
to render text.
.PP
Color support in
.I curses
requires that the terminal type description
support the capabilities
.B \%max_colors
.RB \%( colors ),
.B \%max_pairs
.RB \%( pairs ),
and any of
.bP
.B \%set_foreground
.RB ( setf )
and
.B \%set_background
.RB ( setb );
.bP
.B \%set_a_foreground
.RB ( setaf )
and
.B \%set_a_background
.RB ( setab );
or
.bP
.B \%set_color_pair
.RB ( scp ).
.SS can_change_color
The \fB\%can_change_color\fP routine requires no arguments.
It returns \fBTRUE\fP if the terminal supports colors
and can change their definitions;
other, it returns \fBFALSE\fP.
This routine facilitates writing terminal-independent programs.
.SS init_pair
The \fB\%init_pair\fP routine changes the definition of a color pair.
It takes three arguments:
the number of the color pair to be changed, the foreground
color number, and the background color number.
For portable applications:
.bP
The first argument must be a valid color pair value.
If default colors are used (see \fB\%use_default_colors\fP(3X))
the upper limit is adjusted to allow for extra pairs which use
a default color in foreground and/or background.
.bP
The second and third arguments must be valid color values.
.PP
If the color pair was previously initialized,
the screen is refreshed and all occurrences of that color pair
are changed to the new definition.
.PP
As an extension,
\fI\%ncurses\fP allows you to set color pair \fB0\fP via the
\fB\%assume_default_colors\fP(3X) routine, or to specify the use of
default colors (color number \fB\-1\fP) if you first invoke the
\fB\%use_default_colors\fP(3X) routine.
.SS init_extended_pair
Because \fB\%init_pair\fP uses signed \fBshort\fPs for its parameters,
that limits color pairs and color-values
to 32767 on modern hardware.
The extension \fB\%init_extended_pair\fP uses \fBint\fPs
for the color pair and color-value,
allowing a larger number of colors to be supported.
.SS init_color
The \fB\%init_color\fP routine changes the definition of a color.
It takes four arguments:
the number of the color to be changed followed by three RGB values
(for the amounts of red, green, and blue components).
.bP
The first argument must be a valid color value;
default colors are not allowed here.
(See the section \fB\%Colors\fP for the default color index.)
.bP
Each of the last three arguments
must be a value in the range \fB0\fP through \fB1000\fP.
.PP
When \fB\%init_color\fP is used, all
occurrences of that color on the screen immediately change to the new
definition.
.SS init_extended_color
Because \fB\%init_color\fP uses signed \fBshort\fPs for its parameters,
that limits color-values and their red, green, and blue components
to 32767 on modern hardware.
The extension \fB\%init_extended_color\fP uses \fBint\fPs
for the color value and
for setting the red, green, and blue components,
allowing a larger number of colors to be supported.
.SS color_content
The \fB\%color_content\fP routine gives programmers a way to find the intensity
of the red, green, and blue (RGB) components in a color.
It requires four arguments: the color number, and three addresses
of \fBshort\fRs for storing
the information about the amounts of red, green, and blue components in the
given color.
.bP
The first argument must be a valid color value, i.e.,
\fB0\fP through \fB\%COLORS\-1\fP, inclusive.
.bP
The values that are stored at the addresses pointed to by the
last three arguments are in the range
\fB0\fP (no component) through \fB1000\fP
(maximum amount of component), inclusive.
.SS extended_color_content
Because \fB\%color_content\fP uses signed \fBshort\fPs for its parameters,
that limits color-values and their red, green, and blue components
to 32767 on modern hardware.
The extension \fB\%extended_color_content\fP uses \fBint\fPs
for the color value and
for returning the red, green, and blue components,
allowing a larger number of colors to be supported.
.SS pair_content
The \fB\%pair_content\fP routine allows programmers to find out what colors a
given color pair consists of.
It requires three arguments: the color pair
number, and two addresses of \fBshort\fRs for storing the foreground and the
background color numbers.
.bP
The first argument must be a valid color value,
i.e., in the range \fB1\fP through \fB\%COLOR_PAIRS\-1\fP, inclusive.
.bP
The values that are stored at the addresses pointed
to by the second and third arguments are in the
range \fB0\fP through \fB\%COLORS\fP, inclusive.
.SS extended_pair_content
Because \fB\%pair_content\fP uses signed \fBshort\fPs for its parameters,
that limits color pair and color-values to 32767 on modern hardware.
The extension \fB\%extended_pair_content\fP uses \fBint\fPs
for the color pair and
for returning the foreground and background colors,
allowing a larger number of colors to be supported.
.SS reset_color_pairs
The extension \fB\%reset_color_pairs\fP tells \fI\%ncurses\fP to discard
all of the color pair information which was set with \fB\%init_pair\fP.
It also touches the current- and standard-screens, allowing an application to
switch color palettes rapidly.
.SS COLOR_PAIR
\fB\%COLOR_PAIR(\fIn\fB)\fR converts a color pair number to an
attribute.
Attributes can hold color pairs in the range 0 to 255.
If you need a color pair larger than that,
you must use functions such as \fB\%attr_set\fP
(which pass the color pair as a separate parameter)
rather than the legacy functions such as \fB\%attrset\fP.
.SS PAIR_NUMBER
\fB\%PAIR_NUMBER(\fIattr\fR) extracts the color information from its
\fIattr\fP parameter and returns it as a color pair number;
it is the inverse operation of \fB\%COLOR_PAIR\fP.
.SH RETURN VALUE
.B \%can_change_color
and
.B \%has_colors
return
.B TRUE
or
.BR FALSE "."
The other functions return
.B OK
on success and
.B ERR
on failure.
.PP
In
.IR \%ncurses ","
functions returning an
.I int
recognize several error conditions.
.bP
All return
.B ERR
if the screen has not been initialized;
see \fBinitscr\fP(3X) or \fBnewterm\fP(3X).
.bP
All except
.B \%start_color
return
.B ERR
if
.B \%start_color
has not been called,
or itself returned
.BR ERR "."
.bP
.B \%start_color
returns
.B ERR
if it cannot allocate memory for its color pair table.
.bP
.B \%init_color
returns
.B ERR
if the terminal type does not support assignable color values;
that is,
if the
.B \%initialize_color
.RB ( initc )
capability is absent from its description.
.bP
.B \%init_color
returns
.B ERR
if any of its
.IR r ","
.IR g ","
.I b
arguments is outside the range 0-1000 inclusive.
.bP
.BR \%init_pair ","
.BR \%init_color ","
.BR \%init_extended_pair ","
.BR \%init_extended_color ","
.BR \%color_content ","
.BR \%pair_content ","
.BR \%extended_color_content ","
and
.B \%extended_pair_content
return
.B ERR
on attempts to use
.RS
.bP
color identifiers outside the range
.RB \%0- COLORS \-1
inclusive,
the default colors extension notwithstanding,
or
.bP
color pair identifiers outside the range
.RB \%0- COLOR_PAIRS \-1
inclusive.
.RE
.SH NOTES
In
.IR \%ncurses ","
.B \%init_pair
accepts negative foreground and background color arguments
to support its \fB\%use_default_colors\fP(3X) extension,
but only after the latter function has been called.
.PP
The assumption that
.B \%COLOR_BLACK
is the terminal's default background color can be overridden using
.IR \%ncurses 's
\fB\%assume_default_colors\fP(3X) extension.
.PP
In
.IR \%ncurses ","
each pointer passed to
.B \%color_content
and
.B \%pair_content
can be null,
in which case the library ignores it,
permitting the application to disregard unnecessary information.
.PP
In
.IR \%ncurses ","
each screen has a
color activation flag,
color palette,
color pair table,
and associated
.B \%COLORS
and
.B \%COLOR_PAIRS
values;
.B \%start_color
affects only the current screen.
The SVr4 and X/Open Curses interface was not really designed
with this in mind;
historical implementations may use a single shared color palette.
.PP
Setting an implicit background color via a color pair affects only
character cells that a character write operation explicitly touches.
To change the background color used
when parts of a window are blanked by erasing or scrolling operations,
see \fB\%curs_bkgd\fP(3X).
.PP
Several caveats apply to IBM PC-compatible machines
of the 80486 era and earlier
with CGA/EGA/VGA video.
.bP
.B \%COLOR_YELLOW
was frequently converted,
in the analog domain,
to a shade of brown if the intensity bit was not set.
.\" https://nerdlypleasures.blogspot.com/2023/03/the-saga-of-color-brown-in-early-years.html
To get yellow on such devices,
one would combine
.B \%COLOR_YELLOW
with the
.B \%A_BOLD
attribute.
.bP
The
.B \%A_BLINK
attribute should in theory make the background bright.
This often fails to work,
and even VGA controllers for which it mostly works,
such as those from Paradise and compatibles,
do the wrong thing
when you try to set a bright \*(``yellow\*('' background \(em
you get a blinking yellow foreground instead.
.bP
Color RGB values are not configurable on these devices
(in text mode).
.SH EXTENSIONS
The functions marked as extensions originated in
.IR \%ncurses ","
and are not found in SVr4
.IR curses ,
4.4BSD
.IR curses ,
or any other previous
.I curses
implementation.
.SH PORTABILITY
Applications employing
.I \%ncurses
extensions should condition their use on the visibility of the
.B \%NCURSES_VERSION
preprocessor macro.
.PP
X/Open Curses Issue\ 4 describes these functions.
It specifies no error conditions for them.
.PP
.I \%ncurses
satisfies X/Open Curses's minimum maximums for
.I \%COLORS
and
.IR \%COLOR_PAIRS "."
.PP
X/Open Curses does not specify a limit for the number of colors and
color pairs which a terminal can support.
However,
in its use of
.I short
for the parameters,
it carries over SVr4's implementation detail for the compiled
.I \%term\%info
database,
which uses signed 16-bit numbers.
.I \%ncurses
provides extended versions of the functions using
.I short
parameters,
allowing applications to use larger color and pair identifiers.
.PP
SVr4
.I curses
returns
.I ERR
from
.I \%pair_content
if its
.I pair
argument
was not initialized using
.IR \%init_pairs ,
and from
.I \%color_content
if the terminal does not support changing colors.
.I \%ncurses
does neither.
.SH HISTORY
SVr3.2 (1987) introduced color support to
.I curses
with all of the symbols
in the synopsis above except those marked as extensions.
It reserved color pair 0 as the terminal's initial,
\*(``uncolored\*('' state,
.\" "we assume that color 0 is always a default background.", SVr3.2
.\" usr/src/lib/libcurses/screen/start_col.c
and limited the number of possible color pairs to 64,
because the color pair datum was encoded in six bits of a
.IR \%chtype "."
.PP
SVr4 made only internal changes,
such as moving the storage of color state
from the
.I SCREEN
structure
(pointed to by
.IR SP )
to the
.I \%TERMINAL
structure
(pointed to by
.IR \%cur_term ")."
.PP
Other
.I curses
implementations impose different limits on the number of colors and
color pairs.
.bP
.I \%PCCurses
(1987-1990) provided for only 8 colors
(and therefore required at most 8\(mu8 = 64 color pairs).
.bP
.I \%PDCurses
(1992-present) inherited the 8-color limitation from
.IR \%PCCurses ,
but changed this to 256 in version 2.5 (2001),
and widened its
.I \%chtype
from 16 to 32 bits.
.bP
X/Open Curses (1992-present)
specified a new structure type,
.IR \%cchar_t ","
to store the character code,
attribute flags,
and color pair identifier,
allowing an increased range of color pairs.
It specifies a
.I short
as storing identifiers for colors and color pairs,
limiting portable values to 15 bits;
negative values are invalid in System\ V.
.bP
.I \%ncurses
(1992-present),
in its non-wide-character configuration,
uses 8 bits of
.I \%chtype
for the color pair identifier.
.IP
Version 5.3 (2002) offered a wide-character interface,
but encoded the color pair identifier with attributes
in the character type.
.IP
Since version 6 (2015),
.I \%ncurses
uses a separate
.I int
for the color pair identifier in a
.IR \%cchar_t ","
introducing extension functions to manage the wider type.
When a color pair value fits in 8 bits,
.I \%ncurses
permits color pair data to be manipulated
via the functions taking
.I \%chtype
arguments,
even when a
.I curses
window uses wide-character cells.
.bP
NetBSD
.I curses
used 6 bits for the color pair identifier from 2000
(when it first added color support)
until 2004.
At that point,
NetBSD widened the color pair identifier to use 9 bits.
As of 2025,
that size is unchanged.
.\" http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libcurses/curses.h?rev=1.133
.\" indicates a mask of 0x03fe0000.
Like
.I \%ncurses
before version 6,
the NetBSD color pair datum is stored in
the attributes field of
.IR \%cchar_t ","
limiting the number of color pairs.
.SH SEE ALSO
\fB\%curses\fP(3X),
\fB\%curs_attr\fP(3X),
\fB\%curs_initscr\fP(3X),
\fB\%curs_variables\fP(3X),
\fB\%default_colors\fP(3X)
